# includes:
#     - utils/phpstan-extensions/config/phpstan-extensions.neon
#     # allows symplify error formatter
#     - vendor/symplify/phpstan-extensions/config/config.neon

#     # see https://github.com/symplify/coding-standard
#     # - vendor/symplify/phpstan-rules/config/configurable-rules.neon
#     - vendor/symplify/phpstan-rules/config/static-rules.neon
#     - vendor/symplify/phpstan-rules/config/services/services.neon
#     - vendor/symplify/phpstan-rules/packages/cognitive-complexity/config/cognitive-complexity-services.neon

#     - vendor/symplify/phpstan-rules/config/array-rules.neon
#     - vendor/symplify/phpstan-rules/config/code-complexity-rules.neon
#     - vendor/symplify/phpstan-rules/config/doctrine-rules.neon
#     - vendor/symplify/phpstan-rules/config/naming-rules.neon
#     - vendor/symplify/phpstan-rules/config/regex-rules.neon
#     - vendor/symplify/phpstan-rules/config/services-rules.neon
#     - vendor/symplify/phpstan-rules/config/size-rules.neon
#     - vendor/symplify/phpstan-rules/config/forbidden-static-rules.neon
#     - vendor/symplify/phpstan-rules/config/string-to-constant-rules.neon
#     - vendor/symplify/phpstan-rules/config/symfony-rules.neon
#     - vendor/symplify/phpstan-rules/config/test-rules.neon

# services:
#     -
#         class: Symplify\PHPStanRules\Rules\ForbiddenMethodCallOnTypeRule
#         tags: [phpstan.rules.rule]
#         arguments:
#             forbiddenMethodNamesByTypes:
#                 PhpParser\Node:
#                     - 'getDocComment'
#                     - 'getComments'
#                     - 'setDocComment'

#     -
#         class: Symplify\PHPStanRules\Rules\OnlyOneClassMethodRule
#         tags: [phpstan.rules.rule]
#         arguments:
#             onlyOneMethodsByType:
#                 Rector\Testing\PHPUnit\AbstractRectorTestCase:
#                     - getRectorClass
#                     - provideConfigFileInfo
#                     - getRectorsWithConfiguration

#     -
#         class: Symplify\PHPStanRules\Rules\ForbiddenNodeRule
#         tags: [phpstan.rules.rule]
#         arguments:
#             forbiddenNodes:
#                 - PhpParser\Node\Expr\ErrorSuppress
#                 - PhpParser\Node\Stmt\Switch_
#                 - PhpParser\Node\Expr\Empty_

#     -
#         class: Symplify\PHPStanRules\Rules\RequireClassTypeInClassMethodByTypeRule
#         tags: [phpstan.rules.rule]
#         arguments:
#             requiredTypeInMethodByClass:
#                 Rector\Core\Contract\Rector\PhpRectorInterface:
#                     getNodeTypes: 'PhpParser\Node'

#     -
#         class: Symplify\PHPStanRules\CognitiveComplexity\Rules\FunctionLikeCognitiveComplexityRule
#         tags: [phpstan.rules.rule]
#         arguments:
#             maxMethodCognitiveComplexity: 9

#     -
#         class: Symplify\PHPStanRules\CognitiveComplexity\Rules\ClassLikeCognitiveComplexityRule
#         tags: [phpstan.rules.rule]
#         arguments:
#             maxClassCognitiveComplexity: 50
#             limitsByTypes:
#                 Rector\Core\Rector\AbstractRector: 40
#                 Symfony\Component\Console\Command\Command: 40
#                 PHPStan\Rule\Rule: 30

#     # require constant in argument position
#     -
#         class: Symplify\PHPStanRules\Rules\RequireMethodCallArgumentConstantRule
#         tags: [phpstan.rules.rule]
#         arguments:
#             constantArgByMethodByType:
#                 Symfony\Component\Console\Command\Command:
#                     addArgument: [0]
#                     addOption: [0]
#                 Symfony\Component\Console\Input\InputInterface:
#                     getOption: [0]
#                     getArgument: [0]
#                 PhpParser\Node:
#                     getAttribute: [0]
#                     hasAttribute: [0]
#                     setAttribute: [0]

#     -
#         class: Symplify\PHPStanRules\Rules\SeeAnnotationToTestRule
#         tags: [phpstan.rules.rule]
#         arguments:
#             requiredSeeTypes:
#                 - PHPStan\Rules\Rule
#                 - Rector\Core\Rector\AbstractRector

#     # this rule prevents bug in phar like these: https://github.com/rectorphp/rector/pull/3692/files
#     -
#         class: Symplify\PHPStanRules\Rules\RequireStringArgumentInMethodCallRule
#         tags: [phpstan.rules.rule]
#         arguments:
#             stringArgByMethodByType:
#                 Rector\Core\Rector\AbstractRector:
#                     isObjectType: [1]

#     -
#         class: Symplify\PHPStanRules\Rules\ClassNameRespectsParentSuffixRule
#         tags: [phpstan.rules.rule]
#         arguments:
#             parentClasses:
#                 - Rector

#     -
#         class: Symplify\PHPStanRules\Rules\PreferredClassRule
#         tags: [phpstan.rules.rule]
#         arguments:
#             oldToPreferredClasses:
#                 # prevent PHPStorm autocomplete mess
#                 'Symfony\Component\DependencyInjection\Variable': 'PhpParser\Node\Expr\Variable'
#                 'phpDocumentor\Reflection\Types\Expression': 'PhpParser\Node\Stmt\Expression'
#                 'phpDocumentor\Reflection\DocBlock\Tags\Param': 'PhpParser\Node\Param'
#                 'phpDocumentor\Reflection\DocBlock\Tags\Return_': 'PhpParser\Node\Stmt\Return_'
#                 'Closure': 'PhpParser\Node\Expr\Closure'
#                 'PHPUnit\TextUI\Configuration\Variable': 'PhpParser\Node\Expr\Variable'
#                 'SebastianBergmann\Type\MixedType': 'PHPStan\Type\MixedType'
#                 'Hoa\Protocol\Node\Node': 'PhpParser\Node'
#                 'Nette\Utils\FileSystem': 'Symplify\SmartFileSystem\SmartFileSystem'
#                 'Symfony\Component\Filesystem\Filesystem': 'Symplify\SmartFileSystem\SmartFileSystem'
#                 # builder typo nodes
#                 PhpParser\Builder\Use_: Rector\Core\PhpParser\Builder\UseBuilder
#                 PhpParser\Builder\Class_: Rector\Core\PhpParser\Builder\ClassBuilder
#                 PhpParser\Builder\Method: Rector\Core\PhpParser\Builder\MethodBuilder
#                 PhpParser\Builder\Namespace_: Rector\Core\PhpParser\Builder\NamespaceBuilder
#                 PhpParser\Builder\Param: Rector\Core\PhpParser\Builder\ParamBuilder
#                 PhpParser\Builder\Property: Rector\Core\PhpParser\Builder\PropertyBuilder
#                 PhpParser\Builder\TraitUse: Rector\Core\PhpParser\Builder\TraitUseBuilder

parameters:
    # level: max
    level: 0

    paths:
        # - bin
        - ../../src
        - ../../rules
        - ../../packages
        # - tests
        - ../../utils
        # this cannot be put it, because it wipes PHPStan cache on each run :( - must run in separate
        #- config

    # # to allow installing with various phsptan versions without reporting old errors here
    # bootstrapFiles:
    #     - vendor/symfony/dependency-injection/Loader/Configurator/ContainerConfigurator.php

    scanDirectories:
        - ../../stubs

    reportUnmatchedIgnoredErrors: false

    checkGenericClassInNonGenericObjectType: false

    excludes_analyse:
        - "*/tests/*"
        - ../../utils/phpstan-extensions/*

        - */config.php
        - ../../packages/*/config/*
        - ../../tests/debug_functions.php

        # broken in PHPStan https://github.com/rectorphp/rector/runs/1305002460#step:5:56
        - ../../packages/better-php-doc-parser/src/ValueObject/PhpDocNode/AbstractTagValueNode.php
        - ../../packages/testing/src/PHPUnit/*.php
        - ../../packages/node-type-resolver/tests/NodeVisitor/FunctionMethodAndClassNodeVisitor/FunctionMethodAndClassNodeVisitorTest.php

        # phsptan bug
        - ../../utils/phpstan-extensions/src/Rule/KeepRectorNamespaceForRectorRule.php
        - ../../packages/rector-generator/templates/*
        # this invalidates whole cache everytime
        - '../../packages/symfony-php-config/*'
        - '../../packages/simple-php-doc-parser'

        # generated files
        - '../../packages/doctrine-annotation-generated/src/ConstantPreservingDocParser.php'
        - '../../packages/doctrine-annotation-generated/src/ConstantPreservingAnnotationReader.php'

        - "*/Expected/*"
        # complex printer
        - '*tests/Rector/MethodCall/RenameMethodRector/**/SomeClass.php'
        # tests files
        - '*tests/*/Fixture/*'
        - '*tests/*/Source/*'
        - '*tests/Source/*'
        # part of composer
        - '*/tests/Rector/Psr4/MultipleClassFileToPsr4ClassesRector/Expected/Just*ExceptionWithoutNamespace.php'

        # tests
        - ../../tests/DependencyInjection/config

    ignoreErrors:
        # trait in trait call
        - '#Call to an undefined method Rector\\PostRector\\Rector\\AbstractPostRector\:\:isObjectType\(\)#'
        - '#Parameter \#1 \$expr of class PhpParser\\Node\\Stmt\\Expression constructor expects PhpParser\\Node\\Expr, PhpParser\\Node\\Expr\|PhpParser\\Node\\Stmt given#'
